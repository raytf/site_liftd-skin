---
import Headline from '~/components/ui/Headline.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import type { Concerns as Props } from '~/types';

const {
  title = '',
  subtitle = '',
  tagline = '',
  items = [],
  actions = await Astro.slots.render('actions'),
  isReversed = false,

  id,
  isDark = false,
  classes = {},
  image = await Astro.slots.render('image'),
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`text-white !px-0 !py-0 max-w-none ${classes?.container ?? ''}`}
  bg={bg}
  revealAnimation={false}
>
  <div class="relative md:flex size-full">
    <div class={`md:basis-1/2 self-center py-8 px-8 md:px-16 ${isReversed ? 'md:order-2' : ''}`}>
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={{ container: 'mb-4 md:mb-8', title: 'text-start md:px-8 md:text-4xl' }}
      />
      <ItemGrid
        items={items}
        columns={2}
        classes={{
          container: `gap-y-2 md:gap-y-4 md:px-8`,
          panel: 'min-h-12',
          title: 'font-medium',
          icon: 'flex-shrink-0 mt-1 w-6 h-6',
        }}
      />
      <div class="md:px-8 mt-4 md:mt-8">
        {
          actions && (
            <div class="flex flex-nowrap flex-col justify-center sm:flex-row sm:justify-start gap-4">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }
      </div>
    </div>
    <div aria-hidden="true" class={`md:basis-1/2 ${isReversed ? 'md:order-1' : ''}`}>
      {
        image && (
          <div class="relative h-full">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                width={400}
                height={400}
                widths={[400, 768]}
                sizes="(max-width: 768px) 100vw, 432px"
                layout="responsive"
                {...image}
              />
            )}
          </div>
        )
      }
    </div>
  </div>
</WidgetWrapper>
