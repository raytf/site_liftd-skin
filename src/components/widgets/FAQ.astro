---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { Icon } from 'astro-icon/components';
import type { Faqs as Props } from '~/types';

const {
  title = 'Frequently Asked Questions',
  subtitle = '',
  items = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const leftColumnFaqs = items.slice(0, Math.ceil(items.length / 2));
const rightColumnFaqs = items.slice(Math.ceil(items.length / 2));
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="text-center mb-16">
    <h2 class="text-3xl md:text-4xl font-bold mb-4">{title}</h2>
    {subtitle && <p class="text-lg text-muted-foreground max-w-2xl mx-auto">{subtitle}</p>}
  </div>

  <div class="grid md:grid-cols-2 gap-x-12 gap-y-2 max-w-5xl mx-auto">
    <div class="space-y-2">
      {
        leftColumnFaqs.map((faq, index) => (
          <div class="border rounded-lg">
            <button
              class="faq-trigger flex justify-between items-center w-full px-6 py-4 text-left font-medium group transition-colors"
              data-target={`faq-${index}`}
            >
              <div class="flex items-center gap-4">
                {faq.icon && <Icon name={faq.icon} class="w-7 h-7" />}
                <span class="custom-underline group-hover:highlight">{faq.title}</span>
              </div>
              <svg class="faq-icon h-4 w-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <div id={`faq-${index}`} class="faq-content hidden px-6 pb-4">
              <p class="text-muted-foreground">{faq.description}</p>
            </div>
          </div>
        ))
      }
    </div>

    <div class="space-y-2">
      {
        rightColumnFaqs.map((faq, index) => (
          <div class="border rounded-lg">
            <button
              class="faq-trigger flex justify-between items-center w-full px-6 py-4 text-left font-medium group transition-colors"
              data-target={`faq-${index + leftColumnFaqs.length}`}
            >
              <div class="flex items-center gap-4">
                {faq.icon && <Icon name={faq.icon} class="w-7 h-7" />}
                <span class="custom-underline group-hover:highlight">{faq.title}</span>
              </div>
              <svg class="faq-icon h-4 w-4 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <div id={`faq-${index + leftColumnFaqs.length}`} class="faq-content hidden px-6 pb-4">
              <p class="text-muted-foreground">{faq.description}</p>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</WidgetWrapper>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const faqTriggers = document.querySelectorAll('.faq-trigger');

    faqTriggers.forEach((trigger) => {
      trigger.addEventListener('click', () => {
        const targetId = trigger.getAttribute('data-target');
        if (!targetId) return;

        const content = document.getElementById(targetId);
        const icon = trigger.querySelector('.faq-icon') as HTMLElement;

        if (content && icon) {
          const isHidden = content.classList.contains('hidden');

          // Close all other FAQ items
          document.querySelectorAll('.faq-content').forEach((item) => {
            item.classList.add('hidden');
          });
          document.querySelectorAll('.faq-icon').forEach((item) => {
            (item as HTMLElement).style.transform = 'rotate(0deg)';
          });

          // Toggle current item
          if (isHidden) {
            content.classList.remove('hidden');
            icon.style.transform = 'rotate(180deg)';
          }
        }
      });
    });
  });
</script>
